

Page Object Model (POM)
Page Object Model /Pattern, Web UI elementleri için oluşturan,
test otomasyonunda yaygın olarak kullanılan bir tasarım
modelidir.
Herbir web sayfası için page class’ı olmalı ve burada o sayfaya ait
tüm WebElement’ler tanımlanmalıdır.
Page Object Model’in uygulanması test objeleriyle test scriptlerini
ayırmayı sağlar. Bu da birçok kolaylık ve avantaj sağlar.
Page Factory Class; Selenium WebDriver tarafından Page Object Modelini uygulamak için kullanılan bir class’tır

Niçin Page Object Model?
✓ Kod daha okunabilir ve anlaşılabilir bir modeldir.
✓ Büyüyen test paketinin bakımı daha kolaydır.
✓ Yeniden kullanılabilir(objects, classes, methods, data)
✓ Debugging daha kolay olması için bağımsız test senaryoları oluşturmamızı sağlar
✓ Test execution süresini hızlandırır.
✓ Daha iyi, sürdürülebilir, daha hızlı ve anlaşılır olmasını sağlamak için tercih edilir.



Driver Class – Singleten Driver
Kullanılan Driver Class, tüm sınıflarda paylaşılan tek bir statik driver döndürür.
Driver Class, Framework’deki tüm class’larda aynı driver objesini kullanmamıza izin verecektir.
Singleton Driver class başlatıldığında, bu Driver class tekrar tekrar aynı driver örneğini return eder.
Singleton Pattern: Tekli kullanım, yalnızca örneği olabilecek şekilde geliştirilir, Singleton Driver kullanıcıyı WebDriver'ın
gerekli olduğu tüm örnekler için aynı objeyi kullanmaya zorlayacaktır işte tam da bu yüzden Singleton Pattern bir
classın farklı class’larda obje oluşturularak kullanımını engellemek için kullanılır.
Amaç burada; Driver class’ındaki getDriver() method’unun obje oluşturularak kullanılmasını engellemektir.

Singleton sınıfı oluşturmak için aşağıdaki adımları uygulamamız gerekiyor:
1. Class’ta oluşturulan constructor private olmalı böylece farklı classlarda obje oluşturulamaz.
2. Class’da statik bir referans variable olmalı; her yerden kullanılabilir hale getirmek için static gereklidir.
3. Class’ın bir kez başlatılıp başlatılmadığını kontrol etmesi gereken, class’ın objesi olarak return type static bir method
declare edilmelidir

Properties File
.properties dosyalar çoğunlukla Java programlarında proje yapılandırma verilerini, database
yapılandırmasını veya proje ayarlarını vb. korumak için kullanılır.
Properties(özellikler) dosyasındaki her parametre, her anahtarın bir satırda olduğu, key/value çifti biçiminde bir çift
dize olarak saklanır.
Properties türündeki bir objeyi kullanarak bazı dosyalardan bu datalar okunabilir. Bu, Java'nın kendisi tarafından
sağlanan bir yardımcı programdır.
Tek yapmamız gereken dosya adını ve uzantıyı .properties olarak vermektir. Bizim durumumuzda bunu
configuration.properties olarak adlandırıyoruz.
Avantajı; kodda hiçbir şeyi değiştirmeye gerek kalmadan belirli bir süre boyunca değişmeye eğilimli şeyleri
yapılandırabilmemizdir. Buradan herhangi bir bilgi değiştirilirse, Java sınıfını yeniden derlemeniz gerekmez
Sonuç olarak bu dosya , projeyi temiz ve dinamik hale getirir. Test datalarını dinamik hale getirebiliriz.


